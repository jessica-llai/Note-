#declarration with let/ var 
if a function/if contain i that has appeared before, should declared again 


# mutable array 
the array declared by const is not mutable by assigning s=[]again
but can do so by changing each specific element s[0]=1

# prevent mutation in the array with Object.freeze()
let obj = {
  name:"FreeCodeCamp",
  review:"Awesome"
};
Object.freeze(obj);

# concise way of writing functions 
//not to use var 
const function1 = function() {} -> const function1 = () => {}
const mutiplier = (a,b)=>(a*b)
const multiplier(2,5)= 10

# setting defualt parameter 
const increment = (number, value=1) => number + value;
the value = 1 is set to prevent undefied value induced errors 

# spread operator 
(NaN, arr1) = (...arr1)
Math.max(NaN,array)=Math.max(...array)
array 1= [xxxx]
array 2=(...array1), after which arr1=arr2

# destructiring to assign new element outside a local range 

const myInfo = {
name: Jess;
hobby: cooking; 
}
const {name, hobby} = myInfo 

=== 
const name = myInfo.name;
const hobby = user.hobby;

# destructuring assignment to assign new variable from nested objects
const myInfo = {
name= {
  chinese: yijing 
  english: jess
}
}
const {name{chinese=chineseName}} = myInfo
the babove assign yijing to chineseName


# use destructing to assign variables
only asign the two 
const [x,y,z]=[1,2,3,4,5]
console.log(x,y) = 1,2

swap the value of a,b
let a = 8, b = 6;
[a,b] = [b,a]
console.log(a,b) 

slice the array - similar effect of Array.protptype.slice()
const [1,2,3,4,...,100]=[a,b, ...arr]
a,b=1,2; arr == [3,4,5,6,...,100]

const profileUpdate = (profileData) => {
  const { name, age, nationality, location } = profileData;}
 ===
 const profileUpdate = ({ name, age, nationality, location }) => {}
 const averageAge = ({age1,age2,age3}) = > (age1+age2+age3)/3
 
# use template literals to create strings
const info = {
name: jess
age:21
}
const myInfoc= `hi my name is ${info.name} and i'm ${info.age} years old`
tips: ``not '', use ${to create string or calculation without quotation marks}

# temperate literal 
const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr) {
  // Only change code below this line
  const failureItems = []
  for (let i=0; i<arr.length; i++) {
    failureItems.push('<li class="text-warning"> ${arr.[i]}`</li>')
  }
  
  
  ;
  // Only change code above this line

  return failureItems;
}

const failuresList = makeList(result.failure);

result:
[
  '<li class="text-warning">no-var</li>',
  '<li class="text-warning">var-on-top</li>',
  '<li class="text-warning">linebreak</li>'
]




